/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2025-02-12 18:11:34.279338
/// Generated using solver translationdirection5d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((1.0)*x3);
x11=((0.16908)*x7);
x12=((0.01515)*x0);
x13=((1.0)*x0);
x14=((1.0)*x5);
x15=((0.14459)*x0);
x16=((0.02999885)*x1);
x17=((1.0)*x6);
x18=((0.01515)*x7);
x19=((0.14459)*x7);
x20=((0.16908)*x0);
x21=(x1*x3);
x22=(x1*x2);
x23=(x3*x4);
x24=(x4*x7);
x25=(x2*x4);
x26=(x0*x4);
x27=((5.3e-7)*x25);
IkReal x28=((1.0)*x25);
IkReal x29=((1.0)*x12);
eetrans[0]=(((x6*(((((-1.0)*x20*x28))+((x20*x21))))))+((x6*(((((-1.0)*x23*x29))+(((-1.0)*x22*x29))))))+((x5*((((x20*x22))+((x20*x23))))))+((x0*x16))+(((-1.0)*x0*x27))+(((0.23681015)*x26))+(((5.3e-7)*x0*x21))+((x5*((((x12*x21))+(((-1.0)*x12*x28))))))+((x15*x23))+((x15*x22)));
IkReal x30=((1.0)*x25);
IkReal x31=((1.0)*x18);
eetrans[1]=(((x6*(((((-1.0)*x11*x30))+((x11*x21))))))+(((5.3e-7)*x21*x7))+((x19*x22))+((x19*x23))+((x5*((((x11*x23))+((x11*x22))))))+(((0.23681015)*x24))+(((-5.3e-7)*x2*x24))+((x6*(((((-1.0)*x22*x31))+(((-1.0)*x23*x31))))))+((x16*x7))+((x5*((((x18*x21))+(((-1.0)*x18*x30)))))));
eetrans[2]=((0.05196)+(((0.14459)*x21))+((x5*(((((-0.16908)*x25))+(((0.16908)*x21))))))+((x5*(((((-0.01515)*x23))+(((-0.01515)*x22))))))+((x6*(((((0.01515)*x25))+(((-0.01515)*x21))))))+(((-5.3e-7)*x23))+(((-5.3e-7)*x22))+(((0.23681015)*x1))+((x6*(((((-0.16908)*x23))+(((-0.16908)*x22))))))+(((-0.02999885)*x4))+(((-0.14459)*x25)));
IkReal x32=((1.0)*x13);
eerot[0]=(((x7*x9))+(((-1.0)*x8*((((x17*(((((-1.0)*x22*x32))+(((-1.0)*x10*x26))))))+((x14*((((x0*x21))+(((-1.0)*x25*x32)))))))))));
IkReal x33=((1.0)*x24);
eerot[1]=((((-1.0)*x8*((((x17*(((((-1.0)*x10*x33))+(((-1.0)*x22*x7))))))+((x14*((((x21*x7))+(((-1.0)*x2*x33))))))))))+(((-1.0)*x13*x9)));
IkReal x34=((1.0)*x10);
eerot[2]=((-1.0)*x8*((((x14*(((((-1.0)*x34*x4))+(((-1.0)*x22))))))+((x17*(((((-1.0)*x1*x34))+x25)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.05196)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x36 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x36.valid){
continue;
}
IkReal x35=x36.value;
j0array[0]=((-1.0)*x35);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x35)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-1.8944812)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-1.8944812)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.9472406)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-0.000480921111437751)*r01*r02*sj0))+(((-0.239744560860218)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-0.239744560860218)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.07732475334662)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.1199954)*sj0*(py*py*py)*(r01*r01)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-3.7889624)*cj0*px*py*pz*sj0*(r02*r02)))+(((-0.289913772989945)*cj0*px*py*sj0*(r02*r02)))+(((-0.1199954)*py*sj0*(px*px)*(r02*r02)))+(((-0.706357312920436)*px*pz*r00*r02))+(((-0.0616466320135452)*py*r01*r02))+(((-0.479489121720436)*cj0*r00*r01*sj0*(pz*pz)))+(((1.8944812)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.1199954)*cj0*r00*r01*(py*py*py)))+(((2.8417218)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.9472406)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.00289987726568868)*cj0*pz*r00*r02))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((0.125928790201554)*(px*px)*(r02*r02)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.1199954)*cj0*px*(pz*pz)*(r02*r02)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((1.8944812)*px*py*pz*r00*r01*(sj0*sj0)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.2399908)*cj0*px*py*pz*r01*r02))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.3599862)*cj0*py*r00*r01*(px*px)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-0.000480921111437751)*cj0*r00*r02))+(((-0.00287862063797715)*cj0*py*r00*r01))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-2.8417218)*px*r00*r02*(pz*pz)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.0947876743652459)*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.479489121720436)*py*pz*r01*r02*(sj0*sj0)))+(((-0.706357312920436)*py*pz*r01*r02))+(((-0.1199954)*cj0*(px*px*px)*(r02*r02)))+(((-0.1199954)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.00287862063797715)*cj0*px*(r00*r00)))+(((0.9472406)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.0133848779959707)*cj0*pz*r00*r01*sj0))+(((-0.03633976134662)*cj0*py*pz*r00*r01))+(((-0.1199954)*cj0*px*(py*py)*(r02*r02)))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.479489121720436)*cj0*py*pz*r00*r02*sj0))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((0.9472406)*r01*r02*(py*py*py)))+(((0.00469683774835587)*cj0*r00*r01*sj0))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.8417218)*py*r01*r02*(pz*pz)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.03633976134662)*px*pz*r00*r01*sj0))+(((0.00669243899798536)*px*r00*r02*(cj0*cj0)))+(((0.00234841887417794)*(r01*r01)*(sj0*sj0)))+(((0.00669243899798536)*cj0*px*r01*r02*sj0))+(((0.9472406)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.189575348730492)*px*py*r00*r01*(sj0*sj0)))+(((0.0947876743652459)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((0.9472406)*pz*(px*px)*(r02*r02)))+(((-0.1199954)*cj0*py*r00*r01*(pz*pz)))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-0.9472406)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.8944812)*pz*(px*px)*(r00*r00)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((0.9472406)*r00*r02*(px*px*px)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.9472406)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-2.8417218)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.020492496)*r01*r02*sj0*(py*py)))+(((-0.1199954)*py*sj0*(pz*pz)*(r02*r02)))+(((0.00669243899798536)*cj0*py*r00*r02*sj0))+(((0.00289987726568868)*pz*r01*r02*sj0))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-2.8417218)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.0616466320135452)*px*r00*r02))+(((0.1199954)*py*sj0*(px*px)*(r01*r01)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.1199954)*sj0*(py*py*py)*(r02*r02)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.07732475334662)*cj0*px*py*r01*r02))+(((-0.0947876743652459)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.00577849790366583)*cj0*px*(r02*r02)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((0.479489121720436)*px*pz*r00*r02*(cj0*cj0)))+(((0.020492496)*cj0*r00*r02*(pz*pz)))+(((-0.03633976134662)*py*pz*sj0*(r01*r01)))+(((0.9472406)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.2399908)*cj0*pz*r00*r02*(py*py)))+(((0.1199954)*cj0*px*(py*py)*(r00*r00)))+(((0.0947876743652459)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.020492496)*cj0*r00*r02*(px*px)))+(((0.9472406)*cj0*r00*r02*sj0*(py*py*py)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.07732475334662)*cj0*px*pz*(r02*r02)))+(((-0.0616466320135452)*pz*(r02*r02)))+(((0.9472406)*px*r00*r02*(py*py)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-3.7889624)*px*py*pz*r00*r01))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.020492496)*r01*r02*sj0*(pz*pz)))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.1199954)*r00*r01*sj0*(px*px*px)))+(((-0.9472406)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.2399908)*cj0*px*(py*py)*(r01*r01)))+(((-0.1199954)*cj0*(px*px*px)*(r00*r00)))+(((-1.8944812)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.353178656460218)*(pz*pz)*(r02*r02)))+(((2.8417218)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.3599862)*px*r00*r01*sj0*(py*py)))+(((0.00669243899798536)*py*r01*r02*(sj0*sj0)))+(((-0.9472406)*(pz*pz*pz)*(r02*r02)))+(((0.05683225734662)*cj0*r00*r02*(py*py)))+(((1.8944812)*cj0*px*py*pz*sj0*(r01*r01)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((0.00234841887417794)*(cj0*cj0)*(r00*r00)))+(((-0.1199954)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.9472406)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.00420193296294981)*(r02*r02)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((0.05683225734662)*r01*r02*sj0*(px*px)))+(((-1.8944812)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.189575348730492)*px*py*r00*r01*(cj0*cj0)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((0.479489121720436)*cj0*px*pz*r01*r02*sj0))+(((-0.03633976134662)*cj0*px*pz*(r00*r00)))+(((1.8944812)*cj0*px*py*pz*sj0*(r00*r00)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.00669243899798536)*pz*(r01*r01)*(sj0*sj0)))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((2.8417218)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-0.1199954)*px*r00*r01*sj0*(pz*pz)))+(((-0.454499732517328)*px*py*r00*r01))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.07732475334662)*px*py*r00*r02*sj0))+(((0.9472406)*py*r01*r02*(px*px)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((2.8417218)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-1.8944812)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-1.8944812)*pz*(py*py)*(r01*r01)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.2399908)*px*py*pz*r00*r02*sj0))+(((-0.00287862063797715)*px*r00*r01*sj0))+(((0.9472406)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.227249866258664)*(py*py)*(r01*r01)))+(((0.9472406)*cj0*r01*r02*sj0*(px*px*px)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.00669243899798536)*pz*(cj0*cj0)*(r00*r00)))+(((-0.2399908)*py*sj0*(px*px)*(r00*r00)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-0.00287862063797715)*py*sj0*(r01*r01)))+(((0.189575348730492)*cj0*px*py*sj0*(r01*r01)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-0.144956886494972)*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.2399908)*pz*r01*r02*sj0*(px*px)))+(((-0.00577849790366583)*py*sj0*(r02*r02)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-0.227249866258664)*(px*px)*(r00*r00)))+(((0.125928790201554)*(py*py)*(r02*r02)))+(((0.9472406)*pz*(py*py)*(r02*r02)))+(((-0.144956886494972)*(cj0*cj0)*(px*px)*(r02*r02)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.189575348730492)*cj0*px*py*sj0*(r00*r00))));
op[1]=((((0.8828658582672)*py*pz*sj0*(r02*r02)))+(((0.0133848779959707)*py*sj0*(r02*r02)))+(((-0.0231139916146633)*cj0*pz*r00*r01*sj0))+(((-0.2399908)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.22732902938648)*cj0*px*pz*r01*r02*sj0))+(((5.6834436)*cj0*py*r00*r01*(px*px)))+(((0.12329326402709)*cj0*py*r00*r01))+(((0.8828658582672)*px*py*r00*r02*sj0))+(((1.8944812)*cj0*px*(py*py)*(r02*r02)))+(((-0.11366451469324)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.2399908)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.22732902938648)*cj0*py*pz*r00*r02*sj0))+(((0.12329326402709)*cj0*px*(r00*r00)))+(((0.7199724)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-0.2399908)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-0.0057572412759543)*px*r00*r02))+(((1.8944812)*py*sj0*(pz*pz)*(r02*r02)))+(((0.8828658582672)*cj0*px*pz*(r02*r02)))+(((-0.9599632)*cj0*px*py*pz*sj0*(r02*r02)))+(((0.11366451469324)*(px*px)*(r02*r02)))+(((5.6834436)*px*r00*r01*sj0*(py*py)))+(((-0.0057572412759543)*pz*(r02*r02)))+(((0.026201407348511)*r01*r02*sj0))+(((-0.4799816)*pz*(py*py)*(r01*r01)))+(((1.8944812)*cj0*(px*px*px)*(r02*r02)))+(((0.4799816)*px*py*pz*r00*r01*(sj0*sj0)))+(((0.4799816)*cj0*px*py*pz*sj0*(r01*r01)))+(((0.10990838603112)*pz*r01*r02*sj0))+(((-0.000961842222875502)*(r02*r02)))+(((-3.7889624)*pz*r01*r02*sj0*(px*px)))+(((0.000961842222875502)*(r01*r01)*(sj0*sj0)))+(((1.8944812)*sj0*(py*py*py)*(r01*r01)))+(((0.8828658582672)*py*pz*sj0*(r01*r01)))+(((-0.7199724)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.8828658582672)*r01*r02*sj0*(px*px)))+(((-0.0115569958073317)*pz*(r01*r01)*(sj0*sj0)))+(((3.7889624)*cj0*px*py*pz*r01*r02))+(((-0.11366451469324)*(pz*pz)*(r02*r02)))+(((3.7889624)*px*py*pz*r00*r02*sj0))+(((0.10990838603112)*cj0*pz*r00*r02))+(((0.22732902938648)*py*pz*r01*r02*(sj0*sj0)))+(((1.8944812)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.8828658582672)*cj0*r00*r02*(py*py)))+(((0.0115569958073317)*cj0*py*r00*r02*sj0))+(((-0.9599632)*px*py*pz*r00*r01))+(((-0.7199724)*cj0*px*r01*r02*sj0*(py*py)))+(((-1.8944812)*cj0*px*(py*py)*(r00*r00)))+(((-1.8944812)*cj0*r00*r01*(py*py*py)))+(((0.8828658582672)*px*pz*r00*r01*sj0))+(((0.2399908)*pz*(py*py)*(r02*r02)))+(((-1.8944812)*r00*r01*sj0*(px*px*px)))+(((1.8944812)*sj0*(py*py*py)*(r02*r02)))+(((1.8944812)*px*r00*r01*sj0*(pz*pz)))+(((0.7199724)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.0115569958073317)*pz*(cj0*cj0)*(r00*r00)))+(((-0.7199724)*px*r00*r02*(pz*pz)))+(((3.7889624)*py*sj0*(px*px)*(r00*r00)))+(((0.11366451469324)*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.0115569958073317)*px*r00*r02*(cj0*cj0)))+(((-3.7889624)*cj0*pz*r00*r02*(py*py)))+(((-0.2399908)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.7199724)*py*r01*r02*(pz*pz)))+(((0.8828658582672)*cj0*px*pz*(r00*r00)))+(((0.22732902938648)*cj0*px*py*sj0*(r01*r01)))+(((-0.4799816)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.2399908)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.2399908)*(pz*pz*pz)*(r02*r02)))+(((0.2399908)*pz*(px*px)*(r02*r02)))+(((-0.0057572412759543)*py*r01*r02))+(((-0.22732902938648)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.4799816)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.2399908)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.4799816)*pz*(px*px)*(r00*r00)))+(((-0.11366451469324)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.2399908)*py*r01*r02*(px*px)))+(((-0.22732902938648)*py*pz*r01*r02))+(((0.000961842222875502)*(cj0*cj0)*(r00*r00)))+(((-1.8944812)*py*sj0*(px*px)*(r01*r01)))+(((0.2399908)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.12329326402709)*px*r00*r01*sj0))+(((1.8944812)*cj0*py*r00*r01*(pz*pz)))+(((0.22732902938648)*px*py*r00*r01*(cj0*cj0)))+(((0.2399908)*cj0*r01*r02*sj0*(px*px*px)))+(((0.0115569958073317)*py*r01*r02*(sj0*sj0)))+(((0.12329326402709)*py*sj0*(r01*r01)))+(((-0.4799816)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((1.8944812)*cj0*px*(pz*pz)*(r02*r02)))+(((0.22732902938648)*cj0*px*py*sj0*(r00*r00)))+(((1.8944812)*py*sj0*(px*px)*(r02*r02)))+(((0.0115569958073317)*cj0*px*r01*r02*sj0))+(((0.8828658582672)*cj0*py*pz*r00*r01))+(((0.8828658582672)*cj0*px*py*r01*r02))+(((3.7889624)*cj0*px*(py*py)*(r01*r01)))+(((-0.11366451469324)*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.7199724)*cj0*px*r01*r02*sj0*(pz*pz)))+(((0.22732902938648)*px*pz*r00*r02*(cj0*cj0)))+(((0.7199724)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.22732902938648)*px*py*r00*r01*(sj0*sj0)))+(((0.11366451469324)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.2399908)*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.4799816)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.4799816)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.4799816)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.2399908)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.2399908)*cj0*r00*r02*sj0*(py*py*py)))+(((1.8944812)*cj0*px*(pz*pz)*(r00*r00)))+(((0.026201407348511)*cj0*r00*r02))+(((-0.11366451469324)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((0.2399908)*r01*r02*(py*py*py)))+(((0.0133848779959707)*cj0*px*(r02*r02)))+(((-0.22732902938648)*px*pz*r00*r02))+(((-0.2399908)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((1.8944812)*cj0*(px*px*px)*(r00*r00)))+(((0.11366451469324)*(py*py)*(r02*r02)))+(((0.2399908)*r00*r02*(px*px*px)))+(((0.001923684445751)*cj0*r00*r01*sj0))+(((0.2399908)*px*r00*r02*(py*py)))+(((-0.4799816)*pz*(py*py)*(r02*r02)*(sj0*sj0))));
op[2]=((((-0.0215045696001551)*(r01*r01)*(sj0*sj0)))+(((8.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-24.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.806753473093527)*cj0*px*pz*r01*r02*sj0))+(((-8.0)*px*r00*r02*(pz*pz*pz)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.0177975414226114)*(r02*r02)))+(((-1.38658101907342)*cj0*px*py*sj0*(r00*r00)))+(((-24.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((8.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.806753473093527)*cj0*py*pz*r00*r02*sj0))+(((8.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.040984992)*r01*r02*sj0*(pz*pz)))+(((-0.34099354407972)*r01*r02*sj0*(px*px)))+(((-2.0)*(px*px*px*px)*(r02*r02)))+(((-2.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.289913772989945)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.040984992)*r01*r02*sj0*(py*py)))+(((-0.040984992)*cj0*r00*r02*(px*px)))+(((4.0)*(px*px)*(pz*pz)*(r02*r02)))+(((8.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-24.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-8.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-4.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.30000855207972)*px*py*r00*r02*sj0))+(((8.0)*pz*r01*r02*(py*py*py)))+(((8.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.454499732517328)*(px*px)*(r00*r00)))+(((0.30000855207972)*py*pz*sj0*(r02*r02)))+(((-8.0)*py*r01*r02*(pz*pz*pz)))+(((-2.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-8.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((8.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-1.38658101907342)*px*py*r00*r01*(sj0*sj0)))+(((-2.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-8.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-2.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-8.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-8.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.693290509536708)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.0430091392003102)*cj0*r00*r01*sj0))+(((-16.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-2.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r02*r02)))+(((0.00288552666862651)*r01*r02*sj0))+(((0.38197853607972)*px*pz*r00*r01*sj0))+(((0.30000855207972)*cj0*px*py*r01*r02))+(((8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((4.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((8.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-0.579827545979889)*cj0*px*py*sj0*(r02*r02)))+(((4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.00288552666862651)*cj0*r00*r02))+(((8.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.38197853607972)*cj0*px*pz*(r00*r00)))+(((0.403376736546764)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-8.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-2.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((0.040984992)*cj0*r00*r02*(pz*pz)))+(((0.38197853607972)*cj0*py*pz*r00*r01))+(((-8.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((0.176508545346764)*(pz*pz)*(r02*r02)))+(((8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-0.454499732517328)*(py*py)*(r01*r01)))+(((4.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.0215045696001551)*(cj0*cj0)*(r00*r00)))+(((4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-0.806753473093527)*px*pz*r00*r02*(cj0*cj0)))+(((-16.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((8.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((8.0)*py*pz*r01*r02*(px*px)))+(((-16.0)*px*py*r00*r01*(pz*pz)))+(((0.403376736546764)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.289913772989945)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-0.806753473093527)*py*pz*r01*r02*(sj0*sj0)))+(((0.693290509536708)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.693290509536708)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-2.0)*(py*py*py*py)*(r02*r02)))+(((4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.38197853607972)*py*pz*sj0*(r01*r01)))+(((-1.38658101907342)*px*py*r00*r01*(cj0*cj0)))+(((4.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((0.30000855207972)*cj0*px*pz*(r02*r02)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.631008277864092)*(py*py)*(r02*r02)))+(((0.806753473093527)*cj0*r00*r01*sj0*(pz*pz)))+(((-16.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((8.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((8.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((8.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.353017090693527)*px*pz*r00*r02))+(((0.693290509536708)*(px*px)*(r01*r01)*(sj0*sj0)))+(((8.0)*pz*r00*r02*(px*px*px)))+(((8.0)*px*pz*r00*r02*(py*py)))+(((0.353017090693527)*py*pz*r01*r02))+(((-0.908999465034656)*px*py*r00*r01))+(((-0.34099354407972)*cj0*r00*r02*(py*py)))+(((-8.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-8.0)*(py*py)*(pz*pz)*(r01*r01)))+(((4.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-1.38658101907342)*cj0*px*py*sj0*(r01*r01)))+(((-8.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-8.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-8.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.631008277864092)*(px*px)*(r02*r02))));
op[3]=((((0.0133848779959707)*py*sj0*(r02*r02)))+(((-0.0231139916146633)*cj0*pz*r00*r01*sj0))+(((-0.2399908)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.8828658582672)*cj0*px*py*r01*r02))+(((0.8828658582672)*cj0*r00*r02*(py*py)))+(((5.6834436)*cj0*py*r00*r01*(px*px)))+(((0.12329326402709)*cj0*py*r00*r01))+(((-0.11366451469324)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.22732902938648)*cj0*px*py*sj0*(r00*r00)))+(((1.8944812)*cj0*px*(py*py)*(r02*r02)))+(((-0.2399908)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.12329326402709)*cj0*px*(r00*r00)))+(((0.7199724)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-0.2399908)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-0.0057572412759543)*px*r00*r02))+(((1.8944812)*py*sj0*(pz*pz)*(r02*r02)))+(((-0.9599632)*cj0*px*py*pz*sj0*(r02*r02)))+(((5.6834436)*px*r00*r01*sj0*(py*py)))+(((-0.0057572412759543)*pz*(r02*r02)))+(((-0.8828658582672)*cj0*py*pz*r00*r01))+(((-0.4799816)*pz*(py*py)*(r01*r01)))+(((1.8944812)*cj0*(px*px*px)*(r02*r02)))+(((-0.22732902938648)*cj0*px*pz*r01*r02*sj0))+(((0.4799816)*px*py*pz*r00*r01*(sj0*sj0)))+(((0.4799816)*cj0*px*py*pz*sj0*(r01*r01)))+(((0.10990838603112)*pz*r01*r02*sj0))+(((0.000961842222875502)*(r02*r02)))+(((-3.7889624)*pz*r01*r02*sj0*(px*px)))+(((1.8944812)*sj0*(py*py*py)*(r01*r01)))+(((-0.7199724)*cj0*py*r00*r02*sj0*(px*px)))+(((0.22732902938648)*py*pz*r01*r02))+(((-0.0115569958073317)*pz*(r01*r01)*(sj0*sj0)))+(((3.7889624)*cj0*px*py*pz*r01*r02))+(((-0.8828658582672)*cj0*px*pz*(r00*r00)))+(((3.7889624)*px*py*pz*r00*r02*sj0))+(((0.10990838603112)*cj0*pz*r00*r02))+(((0.11366451469324)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((1.8944812)*py*sj0*(pz*pz)*(r01*r01)))+(((0.11366451469324)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.0115569958073317)*cj0*py*r00*r02*sj0))+(((-0.9599632)*px*py*pz*r00*r01))+(((-0.001923684445751)*cj0*r00*r01*sj0))+(((-0.7199724)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.026201407348511)*cj0*r00*r02))+(((-1.8944812)*cj0*px*(py*py)*(r00*r00)))+(((-1.8944812)*cj0*r00*r01*(py*py*py)))+(((0.2399908)*pz*(py*py)*(r02*r02)))+(((-1.8944812)*r00*r01*sj0*(px*px*px)))+(((-0.8828658582672)*py*pz*sj0*(r02*r02)))+(((1.8944812)*sj0*(py*py*py)*(r02*r02)))+(((0.11366451469324)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.8828658582672)*px*pz*r00*r01*sj0))+(((1.8944812)*px*r00*r01*sj0*(pz*pz)))+(((0.7199724)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.0115569958073317)*pz*(cj0*cj0)*(r00*r00)))+(((-0.7199724)*px*r00*r02*(pz*pz)))+(((3.7889624)*py*sj0*(px*px)*(r00*r00)))+(((0.0115569958073317)*px*r00*r02*(cj0*cj0)))+(((-3.7889624)*cj0*pz*r00*r02*(py*py)))+(((-0.2399908)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.7199724)*py*r01*r02*(pz*pz)))+(((0.22732902938648)*px*pz*r00*r02))+(((0.11366451469324)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.22732902938648)*px*py*r00*r01*(cj0*cj0)))+(((-0.4799816)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.2399908)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.2399908)*(pz*pz*pz)*(r02*r02)))+(((0.2399908)*pz*(px*px)*(r02*r02)))+(((-0.22732902938648)*px*pz*r00*r02*(cj0*cj0)))+(((-0.8828658582672)*px*py*r00*r02*sj0))+(((-0.0057572412759543)*py*r01*r02))+(((0.8828658582672)*r01*r02*sj0*(px*px)))+(((-0.4799816)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.2399908)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.4799816)*pz*(px*px)*(r00*r00)))+(((0.2399908)*py*r01*r02*(px*px)))+(((-0.000961842222875502)*(cj0*cj0)*(r00*r00)))+(((-0.11366451469324)*(py*py)*(r02*r02)))+(((-0.11366451469324)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-1.8944812)*py*sj0*(px*px)*(r01*r01)))+(((-0.11366451469324)*(px*px)*(r02*r02)))+(((0.2399908)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.12329326402709)*px*r00*r01*sj0))+(((-0.22732902938648)*px*py*r00*r01*(sj0*sj0)))+(((1.8944812)*cj0*py*r00*r01*(pz*pz)))+(((0.2399908)*cj0*r01*r02*sj0*(px*px*px)))+(((0.0115569958073317)*py*r01*r02*(sj0*sj0)))+(((0.12329326402709)*py*sj0*(r01*r01)))+(((-0.4799816)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((1.8944812)*cj0*px*(pz*pz)*(r02*r02)))+(((-0.026201407348511)*r01*r02*sj0))+(((1.8944812)*py*sj0*(px*px)*(r02*r02)))+(((0.0115569958073317)*cj0*px*r01*r02*sj0))+(((3.7889624)*cj0*px*(py*py)*(r01*r01)))+(((-0.8828658582672)*cj0*px*pz*(r02*r02)))+(((0.7199724)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.22732902938648)*cj0*py*pz*r00*r02*sj0))+(((-0.22732902938648)*cj0*px*py*sj0*(r01*r01)))+(((0.7199724)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.2399908)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.000961842222875502)*(r01*r01)*(sj0*sj0)))+(((0.4799816)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.4799816)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.4799816)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.2399908)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.2399908)*cj0*r00*r02*sj0*(py*py*py)))+(((1.8944812)*cj0*px*(pz*pz)*(r00*r00)))+(((0.11366451469324)*(pz*pz)*(r02*r02)))+(((0.2399908)*r01*r02*(py*py*py)))+(((0.0133848779959707)*cj0*px*(r02*r02)))+(((-0.8828658582672)*py*pz*sj0*(r01*r01)))+(((0.22732902938648)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.2399908)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.22732902938648)*py*pz*r01*r02*(sj0*sj0)))+(((1.8944812)*cj0*(px*px*px)*(r00*r00)))+(((0.2399908)*r00*r02*(px*px*px)))+(((0.2399908)*px*r00*r02*(py*py)))+(((-0.4799816)*pz*(py*py)*(r02*r02)*(sj0*sj0))));
op[4]=((((-1.0)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((2.8417218)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.000480921111437751)*r01*r02*sj0))+(((-0.9472406)*pz*(px*px)*(r02*r02)))+(((-2.8417218)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.239744560860218)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((1.8944812)*pz*(px*px)*(r00*r00)))+(((-0.239744560860218)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((0.1199954)*cj0*px*(py*py)*(r02*r02)))+(((2.8417218)*py*r01*r02*(pz*pz)))+(((0.00287862063797715)*cj0*py*r00*r01))+(((-0.9472406)*r00*r02*(px*px*px)))+(((-0.07732475334662)*py*pz*sj0*(r02*r02)))+(((-12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.00669243899798536)*cj0*py*r00*r02*sj0))+(((0.9472406)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.1199954)*cj0*px*(pz*pz)*(r00*r00)))+(((0.9472406)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.289913772989945)*cj0*px*py*sj0*(r02*r02)))+(((2.8417218)*px*r00*r02*(pz*pz)))+(((-0.9472406)*px*r00*r02*(py*py)))+(((-0.706357312920436)*px*pz*r00*r02))+(((-0.9472406)*py*r01*r02*(px*px)))+(((0.00669243899798536)*pz*(cj0*cj0)*(r00*r00)))+(((-0.479489121720436)*cj0*r00*r01*sj0*(pz*pz)))+(((0.9472406)*(pz*pz*pz)*(r02*r02)))+(((-0.9472406)*py*r01*r02*(px*px)*(sj0*sj0)))+(((0.00577849790366583)*cj0*px*(r02*r02)))+(((-12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((0.125928790201554)*(px*px)*(r02*r02)))+(((2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((4.0)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((0.1199954)*cj0*px*(pz*pz)*(r02*r02)))+(((4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.2399908)*cj0*pz*r00*r02*(py*py)))+(((-1.8944812)*cj0*px*py*pz*sj0*(r01*r01)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-1.8944812)*px*py*pz*r00*r01*(sj0*sj0)))+(((4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-0.000480921111437751)*cj0*r00*r02))+(((1.8944812)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((1.8944812)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-0.00669243899798536)*px*r00*r02*(cj0*cj0)))+(((0.9472406)*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.1199954)*sj0*(py*py*py)*(r01*r01)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.0947876743652459)*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.479489121720436)*py*pz*r01*r02*(sj0*sj0)))+(((0.1199954)*py*sj0*(px*px)*(r02*r02)))+(((-0.706357312920436)*py*pz*r01*r02))+(((-0.03633976134662)*cj0*py*pz*r00*r01))+(((4.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.9472406)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.1199954)*cj0*py*r00*r01*(pz*pz)))+(((4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.479489121720436)*cj0*py*pz*r00*r02*sj0))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((0.00469683774835587)*cj0*r00*r01*sj0))+(((0.00669243899798536)*pz*(r01*r01)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.0)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.03633976134662)*px*pz*r00*r01*sj0))+(((0.00234841887417794)*(r01*r01)*(sj0*sj0)))+(((0.189575348730492)*px*py*r00*r01*(sj0*sj0)))+(((0.0947876743652459)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((3.7889624)*px*py*pz*r00*r01))+(((1.8944812)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.9472406)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-0.2399908)*pz*r01*r02*sj0*(px*px)))+(((0.0616466320135452)*py*r01*r02))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-1.0)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((-0.020492496)*r01*r02*sj0*(py*py)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((0.1199954)*sj0*(py*py*py)*(r02*r02)))+(((-8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((1.8944812)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-4.0)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.07732475334662)*cj0*px*py*r01*r02))+(((0.00287862063797715)*cj0*px*(r00*r00)))+(((-0.0947876743652459)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-2.8417218)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.479489121720436)*px*pz*r00*r02*(cj0*cj0)))+(((0.020492496)*cj0*r00*r02*(pz*pz)))+(((-0.03633976134662)*py*pz*sj0*(r01*r01)))+(((0.2399908)*cj0*px*py*pz*r01*r02))+(((0.3599862)*cj0*py*r00*r01*(px*px)))+(((0.00287862063797715)*px*r00*r01*sj0))+(((-8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.0947876743652459)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.020492496)*cj0*r00*r02*(px*px)))+(((-1.8944812)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.1199954)*py*sj0*(pz*pz)*(r02*r02)))+(((0.2399908)*cj0*px*(py*py)*(r01*r01)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.00669243899798536)*py*r01*r02*(sj0*sj0)))+(((-0.9472406)*pz*(py*py)*(r02*r02)))+(((1.8944812)*pz*(py*py)*(r01*r01)))+(((-0.07732475334662)*cj0*px*pz*(r02*r02)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-0.00289987726568868)*pz*r01*r02*sj0))+(((-0.9472406)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.0133848779959707)*cj0*pz*r00*r01*sj0))+(((2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.020492496)*r01*r02*sj0*(pz*pz)))+(((-0.00669243899798536)*cj0*px*r01*r02*sj0))+(((-2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.00577849790366583)*py*sj0*(r02*r02)))+(((0.2399908)*py*sj0*(px*px)*(r00*r00)))+(((3.7889624)*cj0*px*py*pz*sj0*(r02*r02)))+(((-0.9472406)*r01*r02*(py*py*py)))+(((-0.353178656460218)*(pz*pz)*(r02*r02)))+(((0.1199954)*py*sj0*(pz*pz)*(r01*r01)))+(((0.9472406)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((0.05683225734662)*cj0*r00*r02*(py*py)))+(((-4.0)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-0.1199954)*cj0*r00*r01*(py*py*py)))+(((4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((0.1199954)*cj0*(px*px*px)*(r00*r00)))+(((0.00234841887417794)*(cj0*cj0)*(r00*r00)))+(((0.00287862063797715)*py*sj0*(r01*r01)))+(((-0.1199954)*r00*r01*sj0*(px*px*px)))+(((-0.00420193296294981)*(r02*r02)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((0.05683225734662)*r01*r02*sj0*(px*px)))+(((-0.9472406)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-1.0)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.189575348730492)*px*py*r00*r01*(cj0*cj0)))+(((4.0)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((0.479489121720436)*cj0*px*pz*r01*r02*sj0))+(((0.3599862)*px*r00*r01*sj0*(py*py)))+(((1.8944812)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.03633976134662)*cj0*px*pz*(r00*r00)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.0616466320135452)*px*r00*r02))+(((4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-0.1199954)*cj0*px*(py*py)*(r00*r00)))+(((-0.454499732517328)*px*py*r00*r01))+(((0.2399908)*px*py*pz*r00*r02*sj0))+(((4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.9472406)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.07732475334662)*px*py*r00*r02*sj0))+(((-0.1199954)*py*sj0*(px*px)*(r01*r01)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((2.0)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.0)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.1199954)*cj0*(px*px*px)*(r02*r02)))+(((-0.227249866258664)*(py*py)*(r01*r01)))+(((-1.8944812)*cj0*px*py*pz*sj0*(r00*r00)))+(((-2.8417218)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((2.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.189575348730492)*cj0*px*py*sj0*(r01*r01)))+(((4.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-0.144956886494972)*(py*py)*(r02*r02)*(sj0*sj0)))+(((2.8417218)*cj0*px*r01*r02*sj0*(py*py)))+(((0.1199954)*px*r00*r01*sj0*(pz*pz)))+(((-0.9472406)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.0616466320135452)*pz*(r02*r02)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-2.8417218)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.227249866258664)*(px*px)*(r00*r00)))+(((-0.9472406)*cj0*r00*r02*sj0*(py*py*py)))+(((0.125928790201554)*(py*py)*(r02*r02)))+(((-0.144956886494972)*(cj0*cj0)*(px*px)*(r02*r02)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.189575348730492)*cj0*px*py*sj0*(r00*r00)))+(((-0.00289987726568868)*cj0*pz*r00*r02)));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x37=((9.64791314453314)*sj1);
IkReal x38=(py*sj0);
IkReal x39=(cj0*px);
IkReal x40=((1.22218705252236)*cj1);
if( (((-0.147791324842409)+((x37*x39))+((x37*x38))+(((9.64791314453314)*cj1*pz))+((x38*x40))+((x39*x40))+(((-20.3705650803674)*(pz*pz)))+(((-20.3705650803674)*(py*py)))+(((-20.3705650803674)*(px*px)))+(((-1.22218705252236)*pz*sj1)))) < -1-IKFAST_SINCOS_THRESH || (((-0.147791324842409)+((x37*x39))+((x37*x38))+(((9.64791314453314)*cj1*pz))+((x38*x40))+((x39*x40))+(((-20.3705650803674)*(pz*pz)))+(((-20.3705650803674)*(py*py)))+(((-20.3705650803674)*(px*px)))+(((-1.22218705252236)*pz*sj1)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x41=IKasin(((-0.147791324842409)+((x37*x39))+((x37*x38))+(((9.64791314453314)*cj1*pz))+((x38*x40))+((x39*x40))+(((-20.3705650803674)*(pz*pz)))+(((-20.3705650803674)*(py*py)))+(((-20.3705650803674)*(px*px)))+(((-1.22218705252236)*pz*sj1))));
j3array[0]=((-1.66015656991983)+(((-1.0)*x41)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.48143608366996)+x41);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x42=py*py;
IkReal x43=pz*pz;
IkReal x44=px*px;
IkReal x45=(px*sj0);
IkReal x46=((2.0)*py);
IkReal x47=((0.4736203)*cj1);
IkReal x48=(py*sj1);
IkReal x49=(r00*sj0);
IkReal x50=(cj0*r01);
IkReal x51=((0.0599977)*sj1);
IkReal x52=(px*r01);
IkReal x53=((0.0599977)*cj1);
IkReal x54=(cj0*r02);
IkReal x55=((1.0)*x44);
evalcond[0]=((-0.0497238370002809)+(((-1.0)*py*x47*x54))+(((-2.0)*pz*r02*x45))+(((-0.056978978144345)*x50))+(((0.0599977)*x48*x54))+((x43*x49))+(((-0.4736203)*r00*x48))+((cj0*px*r00*x46))+(((-0.048894570459)*(IKcos(j3))))+(((-1.0)*x49*x55))+(((-1.0)*py*r00*x53))+(((0.4736203)*sj1*x52))+(((-1.0)*r02*x45*x51))+((x42*x50))+(((0.056978978144345)*x49))+((x42*x49))+((pz*x49*x51))+((x52*x53))+(((-1.0)*x43*x50))+(((-1.0)*pz*x50*x51))+((pz*x46*x54))+(((0.0043808977752)*(IKsin(j3))))+(((-1.0)*r01*x45*x46))+((r02*x45*x47))+((pz*x47*x50))+(((-1.0)*x50*x55))+(((-1.0)*pz*x47*x49)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-11.3501477440913)+(((-11.1608562828809)*cj3))+sj3);
j2eval[1]=IKsign(((-0.0497238370002809)+(((0.0043808977752)*sj3))+(((-0.048894570459)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x56=((0.16908)*cj3);
IkReal x57=((0.01515)*sj3);
IkReal x58=((0.01515)*cj3);
IkReal x59=(pz*sj1);
IkReal x60=(cj1*pz);
IkReal x61=((0.16908)*sj3);
IkReal x62=(cj0*px*sj1);
IkReal x63=((0.14459)*py*sj0);
IkReal x64=(pz*x61);
IkReal x65=(py*sj0*sj1);
IkReal x66=(cj0*cj1*px);
IkReal x67=(cj1*py*sj0);
CheckValue<IkReal> x68=IKPowWithIntegerCheck(IKsign(((-0.0497238370002809)+(((0.0043808977752)*sj3))+(((-0.048894570459)*cj3)))),-1);
if(!x68.valid){
continue;
}
CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(((0.0043374082121205)+(((-1.0)*x56*x67))+(((-1.0)*x56*x66))+(((-1.0)*cj1*x63))+(((0.0014845317855)*cj3))+((x60*x61))+((x58*x65))+((x58*x62))+((x58*x60))+((x61*x62))+((x61*x65))+(((-0.0404943427395)*sj3))+((x57*x66))+((x57*x67))+(((-0.14459)*x66))+((x56*x59))+(((0.14459)*x59))+(((5.3e-7)*x60))+(((5.3e-7)*x62))+(((5.3e-7)*x65))+(((-1.0)*x57*x59)))),IkReal(((0.0342403954878905)+(((-1.0)*x56*x60))+(((-1.0)*x56*x62))+(((-1.0)*x56*x65))+(((-1.0)*x61*x66))+(((-1.0)*x61*x67))+((x59*x61))+((x58*x59))+(((0.0404943427395)*cj3))+((x57*x62))+((x57*x60))+((x57*x65))+(((-1.0)*x58*x67))+(((-1.0)*x58*x66))+(((-0.14459)*x62))+(((-0.14459)*x60))+(((-1.0)*sj1*x63))+(((-5.3e-7)*x66))+(((-5.3e-7)*x67))+(((0.0014845317855)*sj3))+(((5.3e-7)*x59)))),IKFAST_ATAN2_MAGTHRESH);
if(!x69.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x68.value)))+(x69.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x70=IKsin(j2);
IkReal x71=IKcos(j2);
IkReal x72=(r00*sj0);
IkReal x73=(r02*sj1);
IkReal x74=(cj0*py);
IkReal x75=(pz*sj1);
IkReal x76=(cj0*pz);
IkReal x77=(cj1*r02);
IkReal x78=((0.01515)*sj3);
IkReal x79=(cj1*pz);
IkReal x80=(py*sj1);
IkReal x81=(cj0*r01);
IkReal x82=(cj1*px);
IkReal x83=((1.0)*cj0);
IkReal x84=((1.0)*sj0);
IkReal x85=(cj1*py);
IkReal x86=((0.14459)*x70);
IkReal x87=((5.3e-7)*x71);
IkReal x88=((5.3e-7)*x70);
IkReal x89=((0.14459)*x71);
IkReal x90=((1.0)*r01*sj1);
IkReal x91=(px*x84);
IkReal x92=(cj3*x71);
IkReal x93=((0.16908)*x70);
IkReal x94=(cj3*x93);
IkReal x95=((0.01515)*x92);
IkReal x96=((0.16908)*sj3*x71);
IkReal x97=(x70*x78);
IkReal x98=(sj3*x93);
IkReal x99=(x71*x78);
IkReal x100=((0.01515)*cj3*x70);
IkReal x101=((0.16908)*x92);
IkReal x102=(x101+x89);
IkReal x103=(x100+x88+x99+x98);
IkReal x104=(x86+x87+x95+x94+x96);
evalcond[0]=((0.02999885)+(((-1.0)*x82*x83))+x104+x75+(((-1.0)*x84*x85))+(((-1.0)*x97)));
evalcond[1]=((0.23681015)+(((-1.0)*x80*x84))+(((-1.0)*px*sj1*x83))+(((-1.0)*x103))+x102+(((-1.0)*x79)));
evalcond[2]=((((-1.0)*x73*x91))+x104+((r01*x82))+(((-1.0)*r00*x85))+(((-1.0)*x75*x81))+(((-1.0)*x97))+((x72*x75))+((x73*x74))+(((0.02999885)*x72))+(((-0.02999885)*x81)));
evalcond[3]=((((-0.23681015)*x72))+(((-1.0)*x77*x91))+(((-1.0)*x102))+((r00*x80))+x103+(((-1.0)*cj1*r01*x76))+(((0.23681015)*x81))+((x72*x79))+(((-1.0)*px*x90))+((x74*x77)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x105=((9.64791314453314)*sj1);
IkReal x106=(py*sj0);
IkReal x107=(cj0*px);
IkReal x108=((1.22218705252236)*cj1);
if( (((0.147791324842409)+(((-1.0)*x107*x108))+(((-1.0)*x106*x108))+(((-9.64791314453314)*cj1*pz))+(((20.3705650803674)*(pz*pz)))+(((-1.0)*x105*x107))+(((-1.0)*x105*x106))+(((20.3705650803674)*(py*py)))+(((20.3705650803674)*(px*px)))+(((1.22218705252236)*pz*sj1)))) < -1-IKFAST_SINCOS_THRESH || (((0.147791324842409)+(((-1.0)*x107*x108))+(((-1.0)*x106*x108))+(((-9.64791314453314)*cj1*pz))+(((20.3705650803674)*(pz*pz)))+(((-1.0)*x105*x107))+(((-1.0)*x105*x106))+(((20.3705650803674)*(py*py)))+(((20.3705650803674)*(px*px)))+(((1.22218705252236)*pz*sj1)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x109=((-1.0)*(IKasin(((0.147791324842409)+(((-1.0)*x107*x108))+(((-1.0)*x106*x108))+(((-9.64791314453314)*cj1*pz))+(((20.3705650803674)*(pz*pz)))+(((-1.0)*x105*x107))+(((-1.0)*x105*x106))+(((20.3705650803674)*(py*py)))+(((20.3705650803674)*(px*px)))+(((1.22218705252236)*pz*sj1))))));
j3array[0]=((-1.66015656991983)+(((-1.0)*x109)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.48143608366996)+x109);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x110=py*py;
IkReal x111=pz*pz;
IkReal x112=px*px;
IkReal x113=(px*sj0);
IkReal x114=((2.0)*py);
IkReal x115=((0.4736203)*cj1);
IkReal x116=(py*sj1);
IkReal x117=(r00*sj0);
IkReal x118=(cj0*r01);
IkReal x119=((0.0599977)*sj1);
IkReal x120=(px*r01);
IkReal x121=((0.0599977)*cj1);
IkReal x122=(cj0*r02);
IkReal x123=((1.0)*x112);
evalcond[0]=((0.0497238370002809)+(((-1.0)*x118*x123))+((x110*x118))+((x110*x117))+(((-1.0)*r02*x113*x119))+((x111*x117))+(((-1.0)*pz*x118*x119))+(((-1.0)*py*r00*x121))+((r02*x113*x115))+(((0.0599977)*x116*x122))+(((0.048894570459)*(IKcos(j3))))+(((-0.4736203)*r00*x116))+(((-1.0)*x117*x123))+(((-0.056978978144345)*x118))+(((0.4736203)*sj1*x120))+((pz*x115*x118))+(((-1.0)*x111*x118))+((x120*x121))+(((-2.0)*pz*r02*x113))+((pz*x114*x122))+((pz*x117*x119))+(((-1.0)*r01*x113*x114))+(((-1.0)*py*x115*x122))+(((-0.0043808977752)*(IKsin(j3))))+((cj0*px*r00*x114))+(((-1.0)*pz*x115*x117))+(((0.056978978144345)*x117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-11.3501477440913)+(((-11.1608562828809)*cj3))+sj3);
j2eval[1]=IKsign(((-0.0497238370002809)+(((0.0043808977752)*sj3))+(((-0.048894570459)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x124=((0.16908)*cj3);
IkReal x125=((0.01515)*sj3);
IkReal x126=((0.01515)*cj3);
IkReal x127=(pz*sj1);
IkReal x128=(cj1*pz);
IkReal x129=((0.16908)*sj3);
IkReal x130=(cj0*px*sj1);
IkReal x131=((0.14459)*py*sj0);
IkReal x132=(pz*x129);
IkReal x133=(py*sj0*sj1);
IkReal x134=(cj0*cj1*px);
IkReal x135=(cj1*py*sj0);
CheckValue<IkReal> x136=IKPowWithIntegerCheck(IKsign(((-0.0497238370002809)+(((0.0043808977752)*sj3))+(((-0.048894570459)*cj3)))),-1);
if(!x136.valid){
continue;
}
CheckValue<IkReal> x137 = IKatan2WithCheck(IkReal(((0.0043374082121205)+(((0.0014845317855)*cj3))+((x129*x130))+((x129*x133))+(((-1.0)*x124*x135))+(((-1.0)*x124*x134))+(((-0.0404943427395)*sj3))+((x125*x135))+((x125*x134))+((x124*x127))+((x126*x130))+((x126*x133))+(((-1.0)*x125*x127))+(((0.14459)*x127))+((x126*x128))+((x128*x129))+(((-1.0)*cj1*x131))+(((5.3e-7)*x128))+(((-0.14459)*x134))+(((5.3e-7)*x130))+(((5.3e-7)*x133)))),IkReal(((0.0342403954878905)+(((-0.14459)*x128))+(((-5.3e-7)*x135))+(((-5.3e-7)*x134))+(((-1.0)*sj1*x131))+(((-1.0)*x126*x135))+(((-1.0)*x126*x134))+(((-1.0)*x124*x130))+(((-1.0)*x124*x133))+(((-1.0)*x124*x128))+((x125*x128))+(((0.0404943427395)*cj3))+((x125*x133))+((x125*x130))+((x126*x127))+(((-1.0)*x129*x135))+(((-1.0)*x129*x134))+(((0.0014845317855)*sj3))+(((5.3e-7)*x127))+((x127*x129))+(((-0.14459)*x130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x137.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x136.value)))+(x137.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x138=IKsin(j2);
IkReal x139=IKcos(j2);
IkReal x140=(r00*sj0);
IkReal x141=(r02*sj1);
IkReal x142=(cj0*py);
IkReal x143=(pz*sj1);
IkReal x144=(cj0*pz);
IkReal x145=(cj1*r02);
IkReal x146=((0.01515)*sj3);
IkReal x147=(cj1*pz);
IkReal x148=(py*sj1);
IkReal x149=(cj0*r01);
IkReal x150=(cj1*px);
IkReal x151=((1.0)*cj0);
IkReal x152=((1.0)*sj0);
IkReal x153=(cj1*py);
IkReal x154=((0.14459)*x138);
IkReal x155=((5.3e-7)*x139);
IkReal x156=((0.14459)*x139);
IkReal x157=((5.3e-7)*x138);
IkReal x158=((1.0)*r01*sj1);
IkReal x159=(px*x152);
IkReal x160=(cj3*x139);
IkReal x161=((0.16908)*x138);
IkReal x162=(x138*x146);
IkReal x163=(cj3*x161);
IkReal x164=((0.01515)*x160);
IkReal x165=((0.16908)*sj3*x139);
IkReal x166=((0.16908)*x160);
IkReal x167=(sj3*x161);
IkReal x168=(x139*x146);
IkReal x169=((0.01515)*cj3*x138);
IkReal x170=(x166+x156);
IkReal x171=(x168+x169+x167+x157);
IkReal x172=(x163+x164+x165+x155+x154);
evalcond[0]=((0.02999885)+(((-1.0)*x162))+(((-1.0)*x150*x151))+x172+x143+(((-1.0)*x152*x153)));
evalcond[1]=((0.23681015)+(((-1.0)*x171))+(((-1.0)*px*sj1*x151))+x170+(((-1.0)*x148*x152))+(((-1.0)*x147)));
evalcond[2]=(((x140*x143))+(((-1.0)*x143*x149))+(((-1.0)*x172))+((r01*x150))+(((0.02999885)*x140))+x162+(((-1.0)*r00*x153))+((x141*x142))+(((-1.0)*x141*x159))+(((-0.02999885)*x149)));
evalcond[3]=(((x140*x147))+((x142*x145))+(((-1.0)*x171))+(((-0.23681015)*x140))+((r00*x148))+x170+(((-1.0)*px*x158))+(((0.23681015)*x149))+(((-1.0)*x145*x159))+(((-1.0)*cj1*r01*x144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x173=(cj0*r00);
IkReal x174=((5300000000.0)*pz);
IkReal x175=((1.4459e+15)*pz);
IkReal x176=(r01*sj0);
IkReal x177=((5300000000.0)*py);
IkReal x178=(r02*sj0);
IkReal x179=((43374082121205.0)*sj1);
IkReal x180=((342403954878905.0)*sj1);
IkReal x181=((1.4459e+15)*py);
IkReal x182=((342403954878905.0)*cj1);
IkReal x183=((43374082121205.0)*cj1);
IkReal x184=((1.4459e+15)*px);
IkReal x185=(cj0*r02);
IkReal x186=((5300000000.0)*px);
CheckValue<IkReal> x187 = IKatan2WithCheck(IkReal(((((-1.0)*x174*x176))+((r01*x181))+((r00*x184))+((x185*x186))+(((-1.0)*r02*x182))+(((-1.0)*x176*x180))+(((-1.0)*x176*x183))+(((21904488876000.0)*cj4))+(((-1.0)*x173*x183))+(((-1.0)*x173*x180))+(((-1.0)*x173*x174))+((r02*x179))+((r02*x175))+((x177*x178)))),IkReal(((((-1.0)*x175*x176))+((x176*x182))+(((-1.0)*r00*x186))+((x178*x181))+((x173*x182))+(((-1.0)*r02*x174))+(((-1.0)*r01*x177))+(((-1.0)*r02*x180))+(((-1.0)*r02*x183))+((x184*x185))+(((-1.0)*x176*x179))+(((-244472852295000.0)*cj4))+(((-1.0)*x173*x175))+(((-1.0)*x173*x179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x187.valid){
continue;
}
CheckValue<IkReal> x188=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x188.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x187.value)+(((1.5707963267949)*(x188.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x189=IKsin(j3);
IkReal x190=IKcos(j3);
IkReal x191=pz*pz;
IkReal x192=py*py;
IkReal x193=px*px;
IkReal x194=(px*sj0);
IkReal x195=((2.0)*py);
IkReal x196=(cj0*px);
IkReal x197=((1.0)*r02);
IkReal x198=(r02*sj1);
IkReal x199=(cj1*r02);
IkReal x200=((0.4736203)*sj1);
IkReal x201=(py*r00);
IkReal x202=(r01*sj0);
IkReal x203=((0.23681015)*sj1);
IkReal x204=(r00*sj0);
IkReal x205=(cj0*r01);
IkReal x206=(py*sj0);
IkReal x207=(px*r01);
IkReal x208=((0.0599977)*cj1);
IkReal x209=(cj0*py);
IkReal x210=(cj0*r00);
IkReal x211=(pz*r02);
IkReal x212=((0.02999885)*x202);
IkReal x213=(cj1*x210);
IkReal x214=((0.0043808977752)*x189);
IkReal x215=((0.0599977)*pz*sj1);
IkReal x216=((1.0)*x191);
IkReal x217=((1.0)*x193);
IkReal x218=((0.4736203)*cj1*pz);
IkReal x219=(cj4*x189);
IkReal x220=((0.048894570459)*x190);
IkReal x221=(cj4*x190);
evalcond[0]=((-0.0072551411440641)+((x196*x208))+((x196*x200))+((x200*x206))+(((-1.0)*x192))+x218+x220+(((-1.0)*x217))+(((-1.0)*x216))+(((-1.0)*x215))+(((-1.0)*x214))+((x206*x208)));
evalcond[1]=((((-1.0)*pz*x197))+(((-1.0)*px*r00))+(((0.23681015)*x199))+((x203*x210))+(((0.14459)*x219))+(((-0.02999885)*x198))+((x202*x203))+(((-1.0)*py*r01))+((cj1*x212))+(((-5.3e-7)*x221))+(((0.02999885)*x213))+(((-0.01515)*cj4)));
evalcond[2]=((((-1.0)*x196*x197))+(((-0.23681015)*cj1*x202))+(((-1.0)*x197*x206))+((pz*x210))+(((0.23681015)*x198))+(((-0.23681015)*x213))+(((0.16908)*cj4))+(((0.02999885)*x199))+(((0.14459)*x221))+((pz*x202))+((sj1*x212))+(((5.3e-7)*x219))+(((0.02999885)*sj1*x210)));
evalcond[3]=((((-1.0)*x200*x201))+(((-0.0497238370002809)*sj4))+((x204*x215))+(((-1.0)*x201*x208))+(((-0.0599977)*x194*x198))+((r00*x195*x196))+((x200*x207))+((x192*x204))+((x192*x205))+(((0.056978978144345)*x204))+(((-1.0)*x204*x217))+(((-1.0)*x204*x218))+((x205*x218))+(((-1.0)*x205*x216))+(((-1.0)*x205*x215))+(((-1.0)*x205*x217))+((x191*x204))+(((-1.0)*sj4*x220))+(((-2.0)*x194*x211))+(((0.4736203)*x194*x199))+((cj0*x195*x211))+(((-1.0)*r01*x194*x195))+(((0.0599977)*x198*x209))+(((-0.4736203)*x199*x209))+((sj4*x214))+((x207*x208))+(((-0.056978978144345)*x205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x222=(cj4*sj3);
IkReal x223=(cj3*cj4);
j2eval[0]=(x222+(((319018.867924528)*cj4))+(((272811.320754717)*x223)));
j2eval[1]=IKsign(((((5.3e-7)*x222))+(((0.16908)*cj4))+(((0.14459)*x223))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x224=(cj3*cj4);
IkReal x225=(cj4*sj3);
j2eval[0]=((((28584.9056603774)*cj4))+(((-272811.320754717)*x225))+x224);
j2eval[1]=IKsign(((((5.3e-7)*x224))+(((0.01515)*cj4))+(((-0.14459)*x225))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-11.3501477440913)+(((-11.1608562828809)*cj3))+sj3);
j2eval[1]=IKsign(((-0.0497238370002809)+(((0.0043808977752)*sj3))+(((-0.048894570459)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x226=((0.16908)*cj3);
IkReal x227=((0.01515)*sj3);
IkReal x228=((0.01515)*cj3);
IkReal x229=(pz*sj1);
IkReal x230=(cj1*pz);
IkReal x231=((0.16908)*sj3);
IkReal x232=(cj0*px*sj1);
IkReal x233=((0.14459)*py*sj0);
IkReal x234=(pz*x231);
IkReal x235=(py*sj0*sj1);
IkReal x236=(cj0*cj1*px);
IkReal x237=(cj1*py*sj0);
CheckValue<IkReal> x238=IKPowWithIntegerCheck(IKsign(((-0.0497238370002809)+(((0.0043808977752)*sj3))+(((-0.048894570459)*cj3)))),-1);
if(!x238.valid){
continue;
}
CheckValue<IkReal> x239 = IKatan2WithCheck(IkReal(((0.0043374082121205)+(((-0.14459)*x236))+(((0.0014845317855)*cj3))+(((-1.0)*x227*x229))+((x228*x235))+((x228*x230))+((x228*x232))+(((5.3e-7)*x232))+(((5.3e-7)*x230))+(((5.3e-7)*x235))+(((0.14459)*x229))+((x230*x231))+(((-0.0404943427395)*sj3))+(((-1.0)*x226*x237))+(((-1.0)*x226*x236))+((x227*x236))+((x227*x237))+((x226*x229))+((x231*x235))+((x231*x232))+(((-1.0)*cj1*x233)))),IkReal(((0.0342403954878905)+(((-0.14459)*x230))+(((-0.14459)*x232))+((x229*x231))+((x228*x229))+(((5.3e-7)*x229))+(((0.0404943427395)*cj3))+(((-1.0)*x226*x230))+(((-1.0)*x226*x232))+(((-1.0)*x226*x235))+(((-1.0)*x231*x236))+(((-1.0)*x231*x237))+((x227*x235))+((x227*x232))+((x227*x230))+(((-5.3e-7)*x237))+(((-5.3e-7)*x236))+(((0.0014845317855)*sj3))+(((-1.0)*sj1*x233))+(((-1.0)*x228*x237))+(((-1.0)*x228*x236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x239.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x238.value)))+(x239.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x240=IKsin(j2);
IkReal x241=IKcos(j2);
IkReal x242=(r00*sj0);
IkReal x243=(r02*sj1);
IkReal x244=(cj0*py);
IkReal x245=(pz*sj1);
IkReal x246=(cj0*pz);
IkReal x247=(cj1*r02);
IkReal x248=((0.01515)*sj3);
IkReal x249=(cj1*pz);
IkReal x250=(py*sj1);
IkReal x251=(cj0*r01);
IkReal x252=(cj1*px);
IkReal x253=((1.0)*cj0);
IkReal x254=((1.0)*sj0);
IkReal x255=(cj1*py);
IkReal x256=((0.14459)*x240);
IkReal x257=((5.3e-7)*x241);
IkReal x258=((5.3e-7)*x240);
IkReal x259=((0.14459)*x241);
IkReal x260=((1.0)*r01*sj1);
IkReal x261=(px*x254);
IkReal x262=(cj3*x241);
IkReal x263=((0.16908)*x240);
IkReal x264=(cj3*x263);
IkReal x265=((0.01515)*x262);
IkReal x266=((0.16908)*sj3*x241);
IkReal x267=(x240*x248);
IkReal x268=(sj3*x263);
IkReal x269=(x241*x248);
IkReal x270=((0.01515)*cj3*x240);
IkReal x271=((0.16908)*x262);
IkReal x272=(x259+x271);
IkReal x273=(x258+x269+x268+x270);
IkReal x274=(x256+x257+x265+x264+x266);
evalcond[0]=((0.02999885)+(((-1.0)*x252*x253))+(((-1.0)*x254*x255))+x274+x245+(((-1.0)*x267)));
evalcond[1]=((0.23681015)+(((-1.0)*x250*x254))+(((-1.0)*x249))+x272+(((-1.0)*px*sj1*x253))+(((-1.0)*x273)));
evalcond[2]=((((-0.02999885)*x251))+(((-1.0)*x243*x261))+((r01*x252))+(((0.02999885)*x242))+x274+(((-1.0)*x245*x251))+((x242*x245))+(((-1.0)*x267))+((x243*x244))+(((-1.0)*r00*x255)));
evalcond[3]=(((r00*x250))+((x244*x247))+(((0.23681015)*x251))+x273+(((-1.0)*cj1*r01*x246))+((x242*x249))+(((-1.0)*x247*x261))+(((-1.0)*x272))+(((-1.0)*px*x260))+(((-0.23681015)*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-11.3501477440913)+(((-11.1608562828809)*cj3))+sj3);
j2eval[1]=IKsign(((-0.0497238370002809)+(((0.0043808977752)*sj3))+(((-0.048894570459)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x275=((0.16908)*cj3);
IkReal x276=((0.01515)*sj3);
IkReal x277=((0.01515)*cj3);
IkReal x278=(pz*sj1);
IkReal x279=(cj1*pz);
IkReal x280=((0.16908)*sj3);
IkReal x281=(cj0*px*sj1);
IkReal x282=((0.14459)*py*sj0);
IkReal x283=(pz*x280);
IkReal x284=(py*sj0*sj1);
IkReal x285=(cj0*cj1*px);
IkReal x286=(cj1*py*sj0);
CheckValue<IkReal> x287=IKPowWithIntegerCheck(IKsign(((-0.0497238370002809)+(((0.0043808977752)*sj3))+(((-0.048894570459)*cj3)))),-1);
if(!x287.valid){
continue;
}
CheckValue<IkReal> x288 = IKatan2WithCheck(IkReal(((0.0043374082121205)+(((5.3e-7)*x279))+((x275*x278))+((x279*x280))+(((0.0014845317855)*cj3))+(((-0.0404943427395)*sj3))+(((-1.0)*cj1*x282))+(((-0.14459)*x285))+((x277*x279))+(((5.3e-7)*x284))+(((5.3e-7)*x281))+((x280*x284))+((x280*x281))+((x277*x284))+((x277*x281))+(((-1.0)*x275*x285))+(((-1.0)*x275*x286))+((x276*x286))+((x276*x285))+(((0.14459)*x278))+(((-1.0)*x276*x278)))),IkReal(((0.0342403954878905)+(((5.3e-7)*x278))+(((-1.0)*sj1*x282))+(((-1.0)*x277*x285))+(((-1.0)*x277*x286))+((x278*x280))+(((-1.0)*x280*x285))+(((-1.0)*x280*x286))+(((-0.14459)*x279))+(((0.0404943427395)*cj3))+(((-0.14459)*x281))+((x277*x278))+(((-1.0)*x275*x279))+((x276*x279))+(((0.0014845317855)*sj3))+(((-1.0)*x275*x284))+(((-1.0)*x275*x281))+((x276*x281))+((x276*x284))+(((-5.3e-7)*x285))+(((-5.3e-7)*x286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x288.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x287.value)))+(x288.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x289=IKsin(j2);
IkReal x290=IKcos(j2);
IkReal x291=(r00*sj0);
IkReal x292=(r02*sj1);
IkReal x293=(cj0*py);
IkReal x294=(pz*sj1);
IkReal x295=(cj0*pz);
IkReal x296=(cj1*r02);
IkReal x297=((0.01515)*sj3);
IkReal x298=(cj1*pz);
IkReal x299=(py*sj1);
IkReal x300=(cj0*r01);
IkReal x301=(cj1*px);
IkReal x302=((1.0)*cj0);
IkReal x303=((1.0)*sj0);
IkReal x304=(cj1*py);
IkReal x305=((0.14459)*x289);
IkReal x306=((5.3e-7)*x290);
IkReal x307=((0.14459)*x290);
IkReal x308=((5.3e-7)*x289);
IkReal x309=((1.0)*r01*sj1);
IkReal x310=(px*x303);
IkReal x311=(cj3*x290);
IkReal x312=((0.16908)*x289);
IkReal x313=(x289*x297);
IkReal x314=(cj3*x312);
IkReal x315=((0.01515)*x311);
IkReal x316=((0.16908)*sj3*x290);
IkReal x317=((0.16908)*x311);
IkReal x318=(sj3*x312);
IkReal x319=(x290*x297);
IkReal x320=((0.01515)*cj3*x289);
IkReal x321=(x307+x317);
IkReal x322=(x308+x320+x319+x318);
IkReal x323=(x306+x305+x315+x314+x316);
evalcond[0]=((0.02999885)+(((-1.0)*x301*x302))+(((-1.0)*x303*x304))+x323+x294+(((-1.0)*x313)));
evalcond[1]=((0.23681015)+(((-1.0)*x298))+(((-1.0)*px*sj1*x302))+(((-1.0)*x322))+x321+(((-1.0)*x299*x303)));
evalcond[2]=(((x291*x294))+(((0.02999885)*x291))+(((-0.02999885)*x300))+(((-1.0)*x294*x300))+(((-1.0)*x292*x310))+(((-1.0)*x323))+(((-1.0)*r00*x304))+x313+((r01*x301))+((x292*x293)));
evalcond[3]=(((x291*x298))+(((-1.0)*cj1*r01*x295))+(((-1.0)*px*x309))+(((0.23681015)*x300))+(((-1.0)*x322))+x321+(((-0.23681015)*x291))+((r00*x299))+((x293*x296))+(((-1.0)*x296*x310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x324=(cj3*cj4);
IkReal x325=((0.16908)*cj3);
IkReal x326=(cj1*r02);
IkReal x327=(cj4*sj3);
IkReal x328=(pz*sj1);
IkReal x329=((0.01515)*cj3);
IkReal x330=((0.16908)*sj3);
IkReal x331=((0.01515)*sj3);
IkReal x332=((0.01515)*x326);
IkReal x333=(r01*sj0*sj1);
IkReal x334=(cj0*r00*sj1);
IkReal x335=(cj0*cj1*px);
IkReal x336=(cj1*py*sj0);
CheckValue<IkReal> x337 = IKatan2WithCheck(IkReal(((((-1.0)*x327*x336))+(((-1.0)*x327*x335))+((x326*x329))+((x330*x333))+((x330*x334))+((x327*x328))+(((0.02999885)*x327))+(((5.3e-7)*x326))+((x329*x334))+((x329*x333))+((x326*x330))+(((5.3e-7)*x333))+(((5.3e-7)*x334)))),IkReal(((((-0.14459)*x334))+(((-0.14459)*x333))+((x331*x333))+((x331*x334))+(((-1.0)*x325*x326))+((x324*x336))+((x324*x335))+(((-0.02999885)*x324))+(((-0.14459)*x326))+(((-1.0)*x324*x328))+((x326*x331))+(((-1.0)*x325*x334))+(((-1.0)*x325*x333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x337.valid){
continue;
}
CheckValue<IkReal> x338=IKPowWithIntegerCheck(IKsign(((((-0.14459)*x327))+(((5.3e-7)*x324))+(((0.01515)*cj4)))),-1);
if(!x338.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x337.value)+(((1.5707963267949)*(x338.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x339=IKsin(j2);
IkReal x340=IKcos(j2);
IkReal x341=pz*pz;
IkReal x342=py*py;
IkReal x343=px*px;
IkReal x344=(py*sj1);
IkReal x345=((0.0051229707346)*cj4);
IkReal x346=(cj1*r00);
IkReal x347=((1.0)*cj0);
IkReal x348=((0.4736203)*py);
IkReal x349=((2.0)*pz);
IkReal x350=(r02*sj0);
IkReal x351=((1.0)*px);
IkReal x352=(pz*sj0);
IkReal x353=(r02*sj1);
IkReal x354=((0.0599977)*r00);
IkReal x355=((0.01515)*sj4);
IkReal x356=((0.4736203)*r02);
IkReal x357=((0.16908)*sj4);
IkReal x358=(cj1*py);
IkReal x359=(cj0*r02);
IkReal x360=((0.0599977)*r01);
IkReal x361=(r00*sj0);
IkReal x362=(cj0*pz);
IkReal x363=((0.0551791161417)*cj0);
IkReal x364=(cj0*px);
IkReal x365=(cj1*pz);
IkReal x366=((0.0492647919997191)*cj3);
IkReal x367=((0.16908)*cj3);
IkReal x368=((0.014208064336655)*cj0);
IkReal x369=((1.0)*sj0);
IkReal x370=(px*sj1);
IkReal x371=(r00*sj1);
IkReal x372=((0.4736203)*r00);
IkReal x373=((0.0051232772654)*cj3);
IkReal x374=((2.0)*px);
IkReal x375=(r01*sj1);
IkReal x376=(cj1*r02);
IkReal x377=(cj0*r01);
IkReal x378=((2.0)*r01);
IkReal x379=(cj1*px);
IkReal x380=(r01*x369);
IkReal x381=(cj1*x341);
IkReal x382=(sj3*x339);
IkReal x383=(cj4*x340);
IkReal x384=(sj4*x340);
IkReal x385=(cj4*x339);
IkReal x386=(sj3*x340);
IkReal x387=((5.3e-7)*x339);
IkReal x388=((0.14459)*x339);
IkReal x389=((0.0551791161417)*r01*sj0);
IkReal x390=(cj3*x340);
IkReal x391=(cj3*x339);
IkReal x392=(cj1*r01*sj0);
IkReal x393=(cj0*x343);
evalcond[0]=((((-1.0)*x347*x371))+(((-1.0)*x376))+((cj3*x385))+(((-1.0)*x369*x375))+((sj3*x383)));
evalcond[1]=((((-1.0)*cj1*x380))+(((-1.0)*cj3*x383))+x353+(((-1.0)*x346*x347))+((cj4*x382)));
evalcond[2]=((0.02999885)+(((-1.0)*x347*x379))+(((-0.01515)*x382))+(((0.01515)*x390))+(((-1.0)*x358*x369))+x388+(((0.16908)*x386))+(((5.3e-7)*x340))+((pz*sj1))+((x339*x367)));
evalcond[3]=((0.23681015)+(((-1.0)*x347*x370))+(((-0.01515)*x386))+(((-1.0)*x365))+(((0.14459)*x340))+((x340*x367))+(((-0.01515)*x391))+(((-1.0)*x387))+(((-0.16908)*x382))+(((-1.0)*x344*x369)));
evalcond[4]=((((-1.0)*sj1*x350*x351))+((r01*x379))+(((0.02999885)*x361))+((x357*x386))+((x344*x359))+((x352*x371))+((sj4*x388))+((x355*x390))+(((-1.0)*x355*x382))+((x357*x391))+(((5.3e-7)*x384))+(((-0.02999885)*x377))+(((-1.0)*pz*x347*x375))+(((-1.0)*py*x346)));
evalcond[5]=((((-1.0)*x351*x375))+((x355*x386))+(((-0.14459)*x384))+((r00*x344))+((x346*x352))+((x357*x382))+((sj4*x387))+(((-0.23681015)*x361))+(((-1.0)*r01*x347*x365))+((x355*x391))+((x358*x359))+(((-1.0)*cj1*x350*x351))+(((0.23681015)*x377))+(((-1.0)*x357*x390)));
evalcond[6]=((((0.0043812562248)*x383))+(((0.0074522558002809)*sj3*x383))+((px*x346*x349))+((x371*x393))+((x344*x361*x374))+(((-1.0)*x341*x347*x371))+(((0.014208064336655)*x392))+((x349*x353*x364))+((x373*x383))+(((0.0551791161417)*sj0*x375))+(((-1.0)*x354*x362))+(((-1.0)*x342*x376))+((x346*x368))+(((0.0599977)*px*x359))+(((-1.0)*x352*x360))+((x341*x376))+((sj0*x342*x375))+((r01*x349*x358))+(((-1.0)*x343*x376))+(((-1.0)*x341*x369*x375))+(((-1.0)*x343*x369*x375))+((x344*x364*x378))+(((-0.014208064336655)*x353))+(((0.048894538341)*x385))+(((-1.0)*r01*x348))+(((-1.0)*x345*x382))+(((0.0599977)*py*x350))+((x344*x349*x350))+((x366*x385))+(((-1.0)*pz*x356))+(((-1.0)*x342*x347*x371))+(((-1.0)*px*x372))+((x363*x371))+(((0.0551791161417)*x376)));
evalcond[7]=((((0.0043812562248)*x385))+((x349*x359*x379))+(((-1.0)*cj1*x389))+(((-1.0)*x341*x353))+((x373*x385))+(((-1.0)*x380*x381))+((x345*x386))+(((0.014208064336655)*x376))+(((-1.0)*px*x354))+(((-1.0)*x348*x350))+((x342*x392))+(((-0.0599977)*pz*r02))+(((0.014208064336655)*sj0*x375))+(((-1.0)*x356*x364))+(((0.0551791161417)*x353))+(((-1.0)*cj1*x343*x380))+((x346*x393))+(((-1.0)*x341*x346*x347))+((x342*x353))+(((-1.0)*x342*x346*x347))+(((-1.0)*r01*x344*x349))+((x349*x350*x358))+((x343*x353))+((x358*x364*x378))+(((-1.0)*py*x360))+(((0.4736203)*r01*x352))+((x368*x371))+(((-1.0)*x346*x363))+(((0.0074522558002809)*cj4*x382))+(((-1.0)*r00*x349*x370))+((py*sj0*x346*x374))+(((-1.0)*x366*x383))+((x362*x372))+(((-0.048894538341)*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x394=((0.01515)*sj3);
IkReal x395=(r02*sj1);
IkReal x396=((0.16908)*cj3);
IkReal x397=((0.16908)*sj3);
IkReal x398=((0.01515)*cj3);
IkReal x399=(cj4*sj3);
IkReal x400=(cj3*cj4);
IkReal x401=(cj1*r01*sj0);
IkReal x402=(cj0*cj1*r00);
IkReal x403=(cj1*py*sj0);
IkReal x404=(cj0*cj1*px);
IkReal x405=((1.0)*pz*sj1);
CheckValue<IkReal> x406=IKPowWithIntegerCheck(IKsign(((((0.16908)*cj4))+(((5.3e-7)*x399))+(((0.14459)*x400)))),-1);
if(!x406.valid){
continue;
}
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal((((x397*x402))+((x397*x401))+(((-5.3e-7)*x395))+(((-1.0)*x395*x397))+(((-1.0)*x395*x398))+(((5.3e-7)*x401))+(((5.3e-7)*x402))+(((-1.0)*x400*x405))+(((-0.02999885)*x400))+((x398*x402))+((x398*x401))+((x400*x404))+((x400*x403)))),IkReal(((((-0.14459)*x402))+(((-0.14459)*x401))+(((-1.0)*x394*x395))+((x395*x396))+(((0.14459)*x395))+(((-1.0)*x399*x405))+((x399*x403))+((x399*x404))+((x394*x401))+((x394*x402))+(((-1.0)*x396*x401))+(((-1.0)*x396*x402))+(((-0.02999885)*x399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x406.value)))+(x407.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x408=IKsin(j2);
IkReal x409=IKcos(j2);
IkReal x410=pz*pz;
IkReal x411=py*py;
IkReal x412=px*px;
IkReal x413=(py*sj1);
IkReal x414=((0.0051229707346)*cj4);
IkReal x415=(cj1*r00);
IkReal x416=((1.0)*cj0);
IkReal x417=((0.4736203)*py);
IkReal x418=((2.0)*pz);
IkReal x419=(r02*sj0);
IkReal x420=((1.0)*px);
IkReal x421=(pz*sj0);
IkReal x422=(r02*sj1);
IkReal x423=((0.0599977)*r00);
IkReal x424=((0.01515)*sj4);
IkReal x425=((0.4736203)*r02);
IkReal x426=((0.16908)*sj4);
IkReal x427=(cj1*py);
IkReal x428=(cj0*r02);
IkReal x429=((0.0599977)*r01);
IkReal x430=(r00*sj0);
IkReal x431=(cj0*pz);
IkReal x432=((0.0551791161417)*cj0);
IkReal x433=(cj0*px);
IkReal x434=(cj1*pz);
IkReal x435=((0.0492647919997191)*cj3);
IkReal x436=((0.16908)*cj3);
IkReal x437=((0.014208064336655)*cj0);
IkReal x438=((1.0)*sj0);
IkReal x439=(px*sj1);
IkReal x440=(r00*sj1);
IkReal x441=((0.4736203)*r00);
IkReal x442=((0.0051232772654)*cj3);
IkReal x443=((2.0)*px);
IkReal x444=(r01*sj1);
IkReal x445=(cj1*r02);
IkReal x446=(cj0*r01);
IkReal x447=((2.0)*r01);
IkReal x448=(cj1*px);
IkReal x449=(r01*x438);
IkReal x450=(cj1*x410);
IkReal x451=(sj3*x408);
IkReal x452=(cj4*x409);
IkReal x453=(sj4*x409);
IkReal x454=(cj4*x408);
IkReal x455=(sj3*x409);
IkReal x456=((5.3e-7)*x408);
IkReal x457=((0.14459)*x408);
IkReal x458=((0.0551791161417)*r01*sj0);
IkReal x459=(cj3*x409);
IkReal x460=(cj3*x408);
IkReal x461=(cj1*r01*sj0);
IkReal x462=(cj0*x412);
evalcond[0]=(((sj3*x452))+(((-1.0)*x438*x444))+(((-1.0)*x445))+(((-1.0)*x416*x440))+((cj3*x454)));
evalcond[1]=(((cj4*x451))+(((-1.0)*cj1*x449))+x422+(((-1.0)*x415*x416))+(((-1.0)*cj3*x452)));
evalcond[2]=((0.02999885)+(((-0.01515)*x451))+(((-1.0)*x427*x438))+(((0.16908)*x455))+(((-1.0)*x416*x448))+(((0.01515)*x459))+(((5.3e-7)*x409))+x457+((x408*x436))+((pz*sj1)));
evalcond[3]=((0.23681015)+(((-1.0)*x413*x438))+(((-0.01515)*x455))+(((-0.01515)*x460))+(((-1.0)*x434))+(((-1.0)*x416*x439))+(((-0.16908)*x451))+(((-1.0)*x456))+(((0.14459)*x409))+((x409*x436)));
evalcond[4]=((((-1.0)*x424*x451))+((x421*x440))+(((-1.0)*py*x415))+(((0.02999885)*x430))+(((5.3e-7)*x453))+(((-1.0)*sj1*x419*x420))+((x413*x428))+((x426*x455))+((x426*x460))+((sj4*x457))+((x424*x459))+((r01*x448))+(((-0.02999885)*x446))+(((-1.0)*pz*x416*x444)));
evalcond[5]=(((x427*x428))+(((-1.0)*r01*x416*x434))+(((-1.0)*x420*x444))+((x415*x421))+((x426*x451))+(((-0.14459)*x453))+(((-1.0)*cj1*x419*x420))+(((0.23681015)*x446))+((sj4*x456))+(((-0.23681015)*x430))+((x424*x455))+((x424*x460))+((r00*x413))+(((-1.0)*x426*x459)));
evalcond[6]=(((x440*x462))+(((-1.0)*x411*x416*x440))+(((-1.0)*x421*x429))+((r01*x418*x427))+(((0.0551791161417)*sj0*x444))+((x415*x437))+(((0.0074522558002809)*sj3*x452))+(((0.048894538341)*x454))+((x413*x430*x443))+(((-1.0)*x411*x445))+(((0.0599977)*px*x428))+((px*x415*x418))+((x418*x422*x433))+((x410*x445))+(((0.014208064336655)*x461))+((x413*x418*x419))+(((0.0043812562248)*x452))+(((0.0599977)*py*x419))+(((-1.0)*x414*x451))+((x413*x433*x447))+(((0.0551791161417)*x445))+(((-1.0)*x410*x416*x440))+(((-1.0)*x412*x438*x444))+((x442*x452))+(((-0.014208064336655)*x422))+(((-1.0)*r01*x417))+((x435*x454))+(((-1.0)*pz*x425))+(((-1.0)*px*x441))+(((-1.0)*x412*x445))+((sj0*x411*x444))+(((-1.0)*x410*x438*x444))+((x432*x440))+(((-1.0)*x423*x431)));
evalcond[7]=((((-1.0)*x435*x452))+(((-1.0)*x417*x419))+((x427*x433*x447))+(((-1.0)*x411*x415*x416))+(((0.4736203)*r01*x421))+(((-1.0)*px*x423))+((py*sj0*x415*x443))+((x418*x428*x448))+(((0.014208064336655)*sj0*x444))+((x418*x419*x427))+((x411*x422))+(((-0.0599977)*pz*r02))+(((-1.0)*x410*x422))+(((-1.0)*x410*x415*x416))+(((-1.0)*cj1*x458))+(((0.0551791161417)*x422))+(((0.0043812562248)*x454))+(((-1.0)*cj1*x412*x449))+((x411*x461))+((x431*x441))+(((0.014208064336655)*x445))+((x412*x422))+((x442*x454))+(((-1.0)*x415*x432))+(((-1.0)*x425*x433))+(((-0.048894538341)*x452))+(((-1.0)*r00*x418*x439))+((x437*x440))+(((0.0074522558002809)*cj4*x451))+(((-1.0)*py*x429))+(((-1.0)*x449*x450))+((x414*x455))+((x415*x462))+(((-1.0)*r01*x413*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x463=(cj1*sj3);
IkReal x464=(cj0*r00);
IkReal x465=(cj1*cj3);
IkReal x466=(r01*sj0);
IkReal x467=(cj3*sj1);
IkReal x468=(sj1*sj3);
CheckValue<IkReal> x469 = IKatan2WithCheck(IkReal((((x466*x467))+((x463*x464))+((x463*x466))+(((-1.0)*r02*x468))+((r02*x465))+((x464*x467)))),IkReal((((x466*x468))+(((-1.0)*x464*x465))+((r02*x467))+((r02*x463))+(((-1.0)*x465*x466))+((x464*x468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x469.valid){
continue;
}
CheckValue<IkReal> x470=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x470.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x469.value)+(((1.5707963267949)*(x470.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x471=IKsin(j2);
IkReal x472=IKcos(j2);
IkReal x473=pz*pz;
IkReal x474=py*py;
IkReal x475=px*px;
IkReal x476=(py*sj1);
IkReal x477=((0.0051229707346)*cj4);
IkReal x478=(cj1*r00);
IkReal x479=((1.0)*cj0);
IkReal x480=((0.4736203)*py);
IkReal x481=((2.0)*pz);
IkReal x482=(r02*sj0);
IkReal x483=((1.0)*px);
IkReal x484=(pz*sj0);
IkReal x485=(r02*sj1);
IkReal x486=((0.0599977)*r00);
IkReal x487=((0.01515)*sj4);
IkReal x488=((0.4736203)*r02);
IkReal x489=((0.16908)*sj4);
IkReal x490=(cj1*py);
IkReal x491=(cj0*r02);
IkReal x492=((0.0599977)*r01);
IkReal x493=(r00*sj0);
IkReal x494=(cj0*pz);
IkReal x495=((0.0551791161417)*cj0);
IkReal x496=(cj0*px);
IkReal x497=(cj1*pz);
IkReal x498=((0.0492647919997191)*cj3);
IkReal x499=((0.16908)*cj3);
IkReal x500=((0.014208064336655)*cj0);
IkReal x501=((1.0)*sj0);
IkReal x502=(px*sj1);
IkReal x503=(r00*sj1);
IkReal x504=((0.4736203)*r00);
IkReal x505=((0.0051232772654)*cj3);
IkReal x506=((2.0)*px);
IkReal x507=(r01*sj1);
IkReal x508=(cj1*r02);
IkReal x509=(cj0*r01);
IkReal x510=((2.0)*r01);
IkReal x511=(cj1*px);
IkReal x512=(r01*x501);
IkReal x513=(cj1*x473);
IkReal x514=(sj3*x471);
IkReal x515=(cj4*x472);
IkReal x516=(sj4*x472);
IkReal x517=(cj4*x471);
IkReal x518=(sj3*x472);
IkReal x519=((5.3e-7)*x471);
IkReal x520=((0.14459)*x471);
IkReal x521=((0.0551791161417)*r01*sj0);
IkReal x522=(cj3*x472);
IkReal x523=(cj3*x471);
IkReal x524=(cj1*r01*sj0);
IkReal x525=(cj0*x475);
evalcond[0]=((((-1.0)*x479*x503))+(((-1.0)*x501*x507))+((cj3*x517))+((sj3*x515))+(((-1.0)*x508)));
evalcond[1]=(((cj4*x514))+(((-1.0)*cj1*x512))+(((-1.0)*x478*x479))+(((-1.0)*cj3*x515))+x485);
evalcond[2]=((0.02999885)+(((5.3e-7)*x472))+(((0.01515)*x522))+((x471*x499))+(((-0.01515)*x514))+(((0.16908)*x518))+(((-1.0)*x490*x501))+x520+((pz*sj1))+(((-1.0)*x479*x511)));
evalcond[3]=((0.23681015)+(((0.14459)*x472))+((x472*x499))+(((-0.01515)*x518))+(((-1.0)*x479*x502))+(((-1.0)*x476*x501))+(((-1.0)*x497))+(((-0.16908)*x514))+(((-0.01515)*x523))+(((-1.0)*x519)));
evalcond[4]=(((r01*x511))+(((-0.02999885)*x509))+((x476*x491))+(((0.02999885)*x493))+((x489*x523))+(((-1.0)*sj1*x482*x483))+((x484*x503))+(((-1.0)*py*x478))+(((-1.0)*pz*x479*x507))+((x489*x518))+(((5.3e-7)*x516))+((sj4*x520))+(((-1.0)*x487*x514))+((x487*x522)));
evalcond[5]=(((x487*x518))+((sj4*x519))+(((0.23681015)*x509))+(((-0.23681015)*x493))+((x490*x491))+(((-1.0)*x489*x522))+((x478*x484))+((x489*x514))+(((-0.14459)*x516))+(((-1.0)*r01*x479*x497))+(((-1.0)*x483*x507))+((r00*x476))+(((-1.0)*cj1*x482*x483))+((x487*x523)));
evalcond[6]=(((x476*x481*x482))+(((-1.0)*pz*x488))+((x476*x493*x506))+((px*x478*x481))+(((-1.0)*x477*x514))+((r01*x481*x490))+(((-1.0)*x473*x479*x503))+(((-1.0)*x486*x494))+(((0.0551791161417)*sj0*x507))+((x498*x517))+(((0.0599977)*px*x491))+(((-1.0)*x474*x479*x503))+(((-0.014208064336655)*x485))+((x495*x503))+((x481*x485*x496))+(((0.0074522558002809)*sj3*x515))+(((0.048894538341)*x517))+((x503*x525))+(((-1.0)*x475*x501*x507))+(((0.0551791161417)*x508))+(((0.0043812562248)*x515))+(((-1.0)*x473*x501*x507))+(((-1.0)*x474*x508))+(((0.014208064336655)*x524))+((x476*x496*x510))+((x478*x500))+((sj0*x474*x507))+(((-1.0)*x475*x508))+(((-1.0)*x484*x492))+(((0.0599977)*py*x482))+((x505*x515))+(((-1.0)*px*x504))+(((-1.0)*r01*x480))+((x473*x508)));
evalcond[7]=((((-1.0)*x488*x496))+((x500*x503))+(((0.014208064336655)*x508))+((x478*x525))+((x494*x504))+((x474*x524))+((x475*x485))+((x481*x491*x511))+((py*sj0*x478*x506))+(((-0.0599977)*pz*r02))+(((-1.0)*cj1*x521))+(((-1.0)*r01*x476*x481))+((x481*x482*x490))+(((-1.0)*x512*x513))+(((-1.0)*r00*x481*x502))+((x474*x485))+(((-1.0)*x498*x515))+(((-1.0)*px*x486))+(((0.0043812562248)*x517))+(((0.0074522558002809)*cj4*x514))+(((-1.0)*cj1*x475*x512))+(((-1.0)*x480*x482))+(((0.4736203)*r01*x484))+(((-1.0)*x473*x478*x479))+(((-1.0)*x474*x478*x479))+(((-1.0)*py*x492))+((x477*x518))+((x505*x517))+(((-1.0)*x473*x485))+(((-1.0)*x478*x495))+((x490*x496*x510))+(((0.014208064336655)*sj0*x507))+(((0.0551791161417)*x485))+(((-0.048894538341)*x515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - roarm_m3 (794420fbc6dbd88840990d85cf1cc0d5)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
